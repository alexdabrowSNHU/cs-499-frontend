import React, { useState } from 'react';
import ReserveList from '../components/ReserveList';
import type { Dog } from '../types/dog';
import type { Monkey } from '../types/monkey';
import type { Animal } from '../types/animal';

// This mock data is generated by Copilot for testing purposes
// This is our "server" data

const mockDogs: Animal[] = Array.from({ length: 10 }, (_, i) => ({
    id: i + 1,
    name: `Dog ${i + 1}`,
    breed: ['Labrador', 'Beagle', 'Poodle'][i % 3],
    trainingStatus: ['Trained', 'Phase 1', 'Phase 2'][i % 3],
    acquisitionCountry: 'USA',
    reserved: false,
    type: 'dog',
}));

const mockMonkeys: Animal[] = Array.from({ length: 10 }, (_, i) => ({
    id: i + 100, // use a different ID range to avoid conflicts
    name: `Monkey ${i + 1}`,
    species: ['Capuchin', 'Macaque', 'Tamarin'][i % 3],
    trainingStatus: ['Trained', 'Phase 1', 'Phase 2'][i % 3],
    acquisitionCountry: 'USA',
    reserved: false,
    type: 'monkey',
}));

// spread the mockDogs and mockMonkeys arrays into a single array
const mockAnimals = [...mockDogs, ...mockMonkeys];



// ReservePage component
function ReservePage() {
    //  Query is input in the search bar, setQuery is the setter to update the state of query - deault value is an empty string
    const [query, setQuery] = useState('');
    // results is an array of animals that are not reserved, setResults is the setter to update the state of results
    // it is used to display the results of the search in the ReserveList component
    // results is passed as a prop to the ReserveList component
    const [results, setResults] = useState<Animal[]>([]);
    // hasSearched is a boolean that tracks if the users has searched or not - default value is false 
    // it is used to show a message to the user when no animals are found after a search
    // in the ReserveList component
    // hasSearched is passed as a prop to the ReserveList component
    const [hasSearched, setHasSearched] = useState(false); 

    // this function handles the form submission when the user clicks the search button
    const handleSubmit = (e: React.FormEvent) => {
        // prevent the default form submission behavior - this keeps the page from refreshing
        e.preventDefault();
        // if user search is empty
        if (!query) {
            // set results to an empty array and return
            setResults([]);
            setHasSearched(false);
            return;
        }
        // filter the mockAnimals array based on the query
        const filtered = mockAnimals.filter((animal) =>
            // check if animal.name is defined first and then check if it includes the query
            animal.name && animal.name.toLowerCase().includes(query.toLowerCase()) 
        );
        // set the results to the filtered array
        setResults(filtered);
        // set hasSearched to true
        setHasSearched(true);
    };

    return (
        <div className="text-center">
            <h1 className="text-3xl font-bold mb-6 text-gray-300">Reserve an Animal</h1>
            {/* Search bar */}
            {/* query is our constant we defined in ReservePage() that uses useState */}
            {/* setQuery is the setter function that updates the state of query */}
            {/* handleSubmit is the function that handles the form submission */}
             {/* onChange event calls setQuery when the input value changes */}
            {/* onSubmit event calls handleSubmit when the form is submitted */}
            {/* The Search button has a type of submit, which submits the form when clicked */}
           
            <form onSubmit={handleSubmit} className="flex flex-col items-center gap-4">
                <input
                    name="query"
                    placeholder="Search by name"
                    value={query}
                    onChange={(e) => setQuery(e.target.value)}
                    className="px-4 py-2 w-64 rounded border border-gray-600 bg-slate-800 text-white placeholder-gray-400 
             focus:outline-none focus:ring-2 focus:ring-teal-400 
             transition duration-200 ease-in-out"
                />
                <button
                    type="submit"
                    className="bg-teal-400 hover:bg-teal-500 text-white px-6 py-2 rounded transition"
                >
                    Search
                </button>
            </form>
            {/* ReserveList components - takes two props: results and hasSearched */}
            <ReserveList results={results} hasSearched={hasSearched} />
        </div>
    );
}

export default ReservePage;
